{
	"info": {
		"_postman_id": "bdb57ea2-812e-4b36-922f-79eeeef5fe06",
		"name": "Automation Exercise API Collection",
		"description": "The project was made to practice API testing skills in Postman. Automated tests were written for the test scenarios shown below. The tests were run directly in the Postman app and via the command-line Collection Runner (Newman), which allows you to run and test a Postman Collection directly from the command-line.EndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31287599"
	},
	"item": [
		{
			"name": "Create/Register User Account",
			"item": [
				{
					"name": "Create Register User Account Satus code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate that the response code is 400\r",
									"pm.test(\"Response code is 201\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"responseCode\", 201);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'User created!'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User created!\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Register User Account Response time less than 500 ms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ createAccount API\r",
									"console.log(\"تسخين خادم createAccount API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// إنشاء بريد إلكتروني متغير لكل طلب تسخين\r",
									"const randomEmail = () => {\r",
									"    return \"testuser\" + Date.now() + Math.floor(Math.random() * 1000) + \"@example.com\";\r",
									"};\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/createAccount\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"name\", value: \"Warmup User\"},\r",
									"                {key: \"email\", value: randomEmail()},\r",
									"                {key: \"password\", value: \"test123\"},\r",
									"                {key: \"title\", value: \"Mr\"},\r",
									"                {key: \"birth_date\", value: \"10\"},\r",
									"                {key: \"birth_month\", value: \"5\"},\r",
									"                {key: \"birth_year\", value: \"1990\"}\r",
									"                // أضف المزيد من الحقول إذا كانت مطلوبة\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe2@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate HTTPS/TLS Encryption and Valid Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe3@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Content-Type Header is Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate that the response is JSON\r",
									"pm.test(\"Verify response content type is JSON\", function () {\r",
									"    const contentType = pm.response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.include('application/json');\r",
									"});\r",
									"\r",
									"// Check that the body contains expected success message\r",
									"pm.test(\"Response body contains 'User created!'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"User created!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe4@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad Request for Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"name parameter is missing \"\r",
									"pm.test(\"Bad request, name parameter is missing in POST request.\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Bad request, name parameter is missing in POST request.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email",
									"value": "jondoe5@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code is 400\r",
									"pm.test(\"Response code is 400\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"responseCode\", 400);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Bad request,  Invalid Email Format parameter is in POST request.\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Bad request, Email parameter is missing in POST request.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoeexample.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code is 400\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Email already exists!'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Email already exists!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe2@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate JSON format \"Bad Request\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code is 400\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Unsupported media type'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"detail\", \"Unsupported media type \\\"text/plain\\\" in request.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {  \"name\": \"Alice Smith\",\r\n        \"email\": \"jondoe11@example.com\",\r\n        \"password\": \"SecurePass1!\",\r\n        \"title\": \"Ms\",\r\n        \"birth_date\": \"10\",\r\n        \"birth_month\": \"07\",\r\n        \"birth_year\": \"1985\",\r\n        \"firstname\": \"Alice\",\r\n        \"lastname\": \"Smith\",\r\n        \"company\": \"Example Corp\",\r\n        \"address1\": \"123 Main St.\",\r\n        \"address2\": \"Apt. 4B\",\r\n        \"country\": \"United States\",\r\n        \"zipcode\": \"10001\",\r\n        \"state\": \"New York\",\r\n        \"city\": \"New York City\",\r\n        \"mobile_number\": \"5551234567\" }"
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Security Headers in Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Headers include X-Content-Type-Options: nosniff\", function() {\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\");\r",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Strict-Transport-Security with correct max-age\", function() {\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe5@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate No Sensitive Data Exposure in Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Headers include Authorization\", function () {\r",
									"    pm.response.to.have.header(\"Authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Set-Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-Api-Key\", function () {\r",
									"    pm.response.to.have.header(\"X-Api-Key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-User-Password\", function () {\r",
									"    pm.response.to.have.header(\"X-User-Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe6@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "CORS Headers for Cross-Origin Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate CORS Headers\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    // Check Access-Control-Allow-Origin\r",
									"    const allowOrigin = headers.get('Access-Control-Allow-Origin');\r",
									"    pm.expect(allowOrigin, \"Access-Control-Allow-Origin should not be * if credentials are allowed\")\r",
									"      .to.not.eql('*');\r",
									"\r",
									"    // Check Access-Control-Allow-Methods\r",
									"    const allowMethods = headers.get('Access-Control-Allow-Methods');\r",
									"    pm.expect(allowMethods, \"Allow Methods should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Headers\r",
									"    const allowHeaders = headers.get('Access-Control-Allow-Headers');\r",
									"    pm.expect(allowHeaders, \"Allow Headers should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Credentials\r",
									"    const allowCredentials = headers.get('Access-Control-Allow-Credentials');\r",
									"    if (allowCredentials === 'true') {\r",
									"        pm.expect(allowOrigin, \"If credentials are allowed, origin should not be *\")\r",
									"          .to.not.eql('*');\r",
									"    }\r",
									"\r",
									"    // Optional: Print them for debugging\r",
									"    console.log('CORS Headers:');\r",
									"    console.log('Access-Control-Allow-Origin:', allowOrigin);\r",
									"    console.log('Access-Control-Allow-Methods:', allowMethods);\r",
									"    console.log('Access-Control-Allow-Headers:', allowHeaders);\r",
									"    console.log('Access-Control-Allow-Credentials:', allowCredentials);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "http://test-domain.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe7@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Long Input Values in name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate that the response code is 400\r",
									"pm.test(\"Response code is 201\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"responseCode\", 201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is 'User created!'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Invalid Name\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe8@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Password Length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate that the response code is 400\r",
									"pm.test(\"Response code is 400\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"responseCode\", 201);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Password must be at least 8 characters'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Invalid Password\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe9@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123456",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cache Headers Prevent Client-Side Caching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Cache-Control headers prevent client-side caching\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    const cacheControl = headers.get('Cache-Control');\r",
									"    const pragma = headers.get('Pragma');\r",
									"    const expires = headers.get('Expires');\r",
									"\r",
									"    // Check Cache-Control\r",
									"    pm.expect(cacheControl, \"Cache-Control header should exist\").to.not.be.undefined;\r",
									"    pm.expect(cacheControl.toLowerCase(), \"Cache-Control should include no-store\").to.include(\"no-store\");\r",
									"\r",
									"    // Check Pragma\r",
									"    if (pragma) {\r",
									"        pm.expect(pragma.toLowerCase(), \"Pragma should be no-cache\").to.include(\"no-cache\");\r",
									"    }\r",
									"\r",
									"    // Check Expires\r",
									"    if (expires) {\r",
									"        pm.expect(['0', '-1']).to.include(expires.trim(), \"Expires should be 0 or -1\");\r",
									"    }\r",
									"\r",
									"    // Optional log\r",
									"    console.log(\"Cache-Control:\", cacheControl);\r",
									"    console.log(\"Pragma:\", pragma);\r",
									"    console.log(\"Expires:\", expires);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe10@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text",
									"disabled": true
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text",
									"disabled": true
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Optional Fields (company, address2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'User created!'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User created!\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe13@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text",
									"disabled": true
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text",
									"disabled": true
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"put\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"// Check that the response body contains the correct error detail\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Delete\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"// Check that the response body contains the correct error detail\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe13@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"// Check that the response body contains the correct error detail\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe15@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Patch\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "valid Request \"OPTIONS\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Confirming that the 'name' property exists in the response body\r",
									"pm.test('Name property exists', () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.name).to.exist;\r",
									"});\r",
									"// Check for exact value of the 'name' property\r",
									"pm.test('Name has exact value', () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.name).to.equal('Create Account');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/createAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify Login",
			"item": [
				{
					"name": "Verify Login Satus code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "Verify Login Body is json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate the response body is a JSON object\r",
									"pm.test(\"Response body is JSON\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Validate that the response code is 200\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"responseCode\", 200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'User exists!'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User exists!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "Verify Login  Response time",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// يوضع هذا في قسم Pre-request Script لـ verifyLogin API\r",
									"console.log(\"تسخين خادم verifyLogin API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/verifyLogin\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"email\", value: \"test@example.com\"},\r",
									"                {key: \"password\", value: \"test123\"}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "Validate HTTPS/TLS Encryption and Valid Certificate Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Headers contain the expected Content-Type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response headers contain expected Content-Type\", function () {\r",
									"    // Check if Content-Type header exists\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"    \r",
									"   \r",
									"    // Validate the Content-Type value (adjust as needed for your API)\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('pplication/x-www-form-urlencoded');\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "invalid Request \"GET\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "invalid Parameters \"password\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valid Response body contains 405 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"Bad request, email or password parameter is missing in POST request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "Validate Security Headers in Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Headers include X-Content-Type-Options: nosniff\", function() {\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\");\r",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Strict-Transport-Security with correct max-age\", function() {\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate No Sensitive Data Exposure in Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Headers include Authorization\", function () {\r",
									"    pm.response.to.have.header(\"Authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Set-Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-Api-Key\", function () {\r",
									"    pm.response.to.have.header(\"X-Api-Key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-User-Password\", function () {\r",
									"    pm.response.to.have.header(\"X-User-Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "CORS Headers for Cross-Origin Requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate CORS Headers\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    // Check Access-Control-Allow-Origin\r",
									"    const allowOrigin = headers.get('Access-Control-Allow-Origin');\r",
									"    pm.expect(allowOrigin, \"Access-Control-Allow-Origin should not be * if credentials are allowed\")\r",
									"      .to.not.eql('*');\r",
									"\r",
									"    // Check Access-Control-Allow-Methods\r",
									"    const allowMethods = headers.get('Access-Control-Allow-Methods');\r",
									"    pm.expect(allowMethods, \"Allow Methods should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Headers\r",
									"    const allowHeaders = headers.get('Access-Control-Allow-Headers');\r",
									"    pm.expect(allowHeaders, \"Allow Headers should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Credentials\r",
									"    const allowCredentials = headers.get('Access-Control-Allow-Credentials');\r",
									"    if (allowCredentials === 'true') {\r",
									"        pm.expect(allowOrigin, \"If credentials are allowed, origin should not be *\")\r",
									"          .to.not.eql('*');\r",
									"    }\r",
									"\r",
									"    // Optional: Print them for debugging\r",
									"    console.log('CORS Headers:');\r",
									"    console.log('Access-Control-Allow-Origin:', allowOrigin);\r",
									"    console.log('Access-Control-Allow-Methods:', allowMethods);\r",
									"    console.log('Access-Control-Allow-Headers:', allowHeaders);\r",
									"    console.log('Access-Control-Allow-Credentials:', allowCredentials);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "invalid Parameters \"Empty Email\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Valid Response body contains 405 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"User not found!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "invalid Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// يوضع هذا في قسم Pre-request Script لـ verifyLogin API\r",
									"console.log(\"تسخين خادم verifyLogin API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/verifyLogin\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"email\", value: \"test@example.com\"},\r",
									"                {key: \"password\", value: \"test123\"}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin22",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin22"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "invalid Parameters \"Wrong Password \"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valid Response body contains 405 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if response contains correct response code\r",
									"    pm.expect(jsonData).to.have.property('responseCode');\r",
									"    pm.expect(jsonData.responseCode).to.equal(400);\r",
									"    \r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"Bad request, email or password parameter is missing in POST request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123555",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "Cache Headers Prevent Client-Side Caching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Cache-Control headers prevent client-side caching\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    const cacheControl = headers.get('Cache-Control');\r",
									"    const pragma = headers.get('Pragma');\r",
									"    const expires = headers.get('Expires');\r",
									"\r",
									"    // Check Cache-Control\r",
									"    pm.expect(cacheControl, \"Cache-Control header should exist\").to.not.be.undefined;\r",
									"    pm.expect(cacheControl.toLowerCase(), \"Cache-Control should include no-store\").to.include(\"no-store\");\r",
									"\r",
									"    // Check Pragma\r",
									"    if (pragma) {\r",
									"        pm.expect(pragma.toLowerCase(), \"Pragma should be no-cache\").to.include(\"no-cache\");\r",
									"    }\r",
									"\r",
									"    // Check Expires\r",
									"    if (expires) {\r",
									"        pm.expect(['0', '-1']).to.include(expires.trim(), \"Expires should be 0 or -1\");\r",
									"    }\r",
									"\r",
									"    // Optional log\r",
									"    console.log(\"Cache-Control:\", cacheControl);\r",
									"    console.log(\"Pragma:\", pragma);\r",
									"    console.log(\"Expires:\", expires);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Delete\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// يوضع هذا في قسم Pre-request Script لـ verifyLogin API\r",
									"console.log(\"تسخين خادم verifyLogin API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/verifyLogin\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"email\", value: \"test@example.com\"},\r",
									"                {key: \"password\", value: \"test123\"}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "invalid Request \"put\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				},
				{
					"name": "invalid Request \"Patch\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/verifyLogin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						},
						"description": "التحقق من تسجيل الدخول"
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Product",
			"item": [
				{
					"name": "Valid Search Term Satus code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Valid Search Term Response  Body  Valid Product Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Parse the response body\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check that the response code is 200\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.expect(response.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"// Check that 'products' array exists and is not empty\r",
									"pm.test(\"'products' array exists and has items\", function () {\r",
									"    pm.expect(response.products).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Check structure of the first product\r",
									"pm.test(\"First product has required fields\", function () {\r",
									"    let firstProduct = response.products[0];\r",
									"    pm.expect(firstProduct).to.have.property(\"id\");\r",
									"    pm.expect(firstProduct).to.have.property(\"name\");\r",
									"    pm.expect(firstProduct).to.have.property(\"price\");\r",
									"    pm.expect(firstProduct).to.have.property(\"brand\");\r",
									"    pm.expect(firstProduct).to.have.property(\"category\");\r",
									"\r",
									"    // Nested checks\r",
									"    pm.expect(firstProduct.category).to.have.property(\"usertype\");\r",
									"    pm.expect(firstProduct.category.usertype).to.have.property(\"usertype\");\r",
									"    pm.expect(firstProduct.category).to.have.property(\"category\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Valid Search Term Response time",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ brandsList API\r",
									"console.log(\"تسخين خادم brandsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/searchProduct\",\r",
									"        method: \"POST\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Validate HTTPS/TLS Encryption and Valid Certificate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Validate Content-Type Header is \"application/json\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate Content-Type Header is \"application/json\"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "invalid Request \"Get\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ brandsList API\r",
									"console.log(\"تسخين خادم brandsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/searchProduct\",\r",
									"        method: \"POST\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test(\"Valid Response body contains 405 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    \r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Missing search_product Parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Valid Response body contains 400 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"   \r",
									"\r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"Bad request, search_product parameter is missing in POST request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "invalid Search Term",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check that products is an empty array\r",
									"pm.test(\"Products array is empty for invalid search term\", function () {\r",
									"    pm.expect(response.products).to.be.an(\"array\").that.is.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "ahmed",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Validate Security Headers in Response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Headers include X-Content-Type-Options: nosniff\", function() {\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\");\r",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Strict-Transport-Security with correct max-age\", function() {\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Validate No Sensitive Data Exposure in Headers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Headers include Authorization\", function () {\r",
									"    pm.response.to.have.header(\"Authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Set-Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-Api-Key\", function () {\r",
									"    pm.response.to.have.header(\"X-Api-Key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-User-Password\", function () {\r",
									"    pm.response.to.have.header(\"X-User-Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "CORS Headers for Cross-Origin Requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate CORS Headers\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    // Check Access-Control-Allow-Origin\r",
									"    const allowOrigin = headers.get('Access-Control-Allow-Origin');\r",
									"    pm.expect(allowOrigin, \"Access-Control-Allow-Origin should not be * if credentials are allowed\")\r",
									"      .to.not.eql('*');\r",
									"\r",
									"    // Check Access-Control-Allow-Methods\r",
									"    const allowMethods = headers.get('Access-Control-Allow-Methods');\r",
									"    pm.expect(allowMethods, \"Allow Methods should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Headers\r",
									"    const allowHeaders = headers.get('Access-Control-Allow-Headers');\r",
									"    pm.expect(allowHeaders, \"Allow Headers should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Credentials\r",
									"    const allowCredentials = headers.get('Access-Control-Allow-Credentials');\r",
									"    if (allowCredentials === 'true') {\r",
									"        pm.expect(allowOrigin, \"If credentials are allowed, origin should not be *\")\r",
									"          .to.not.eql('*');\r",
									"    }\r",
									"\r",
									"    // Optional: Print them for debugging\r",
									"    console.log('CORS Headers:');\r",
									"    console.log('Access-Control-Allow-Origin:', allowOrigin);\r",
									"    console.log('Access-Control-Allow-Methods:', allowMethods);\r",
									"    console.log('Access-Control-Allow-Headers:', allowHeaders);\r",
									"    console.log('Access-Control-Allow-Credentials:', allowCredentials);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "Cache Headers Prevent Client-Side Caching",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cache-Control header prevents caching\", function () {\r",
									"    const cacheControl = pm.response.headers.get(\"Cache-Control\");\r",
									"    pm.expect(cacheControl, \"Cache-Control header is missing\").to.not.be.null;\r",
									"    if (cacheControl) {\r",
									"        pm.expect(cacheControl.toLowerCase()).to.include.oneOf([\"no-cache\", \"no-store\", \"must-revalidate\"]);\r",
									"    } else {\r",
									"        console.warn(\"Cache-Control header is missing\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Pragma header prevents caching\", function () {\r",
									"    const pragma = pm.response.headers.get(\"Pragma\");\r",
									"    if (pragma) {\r",
									"        pm.expect(pragma.toLowerCase()).to.equal(\"no-cache\");\r",
									"    } else {\r",
									"        console.warn(\"Pragma header is missing\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Expires header is set to prevent caching\", function () {\r",
									"    const expires = pm.response.headers.get(\"Expires\");\r",
									"    if (expires) {\r",
									"        pm.expect(expires).to.satisfy(function (value) {\r",
									"            return value === \"0\" || new Date(value) < new Date();\r",
									"        });\r",
									"    } else {\r",
									"        console.warn(\"Expires header is missing\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "invalid Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ brandsList API\r",
									"console.log(\"تسخين خادم brandsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/searchProduct\",\r",
									"        method: \"POST\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct22",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct22"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "unexpected query parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ brandsList API\r",
									"console.log(\"تسخين خادم brandsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/searchProduct\",\r",
									"        method: \"POST\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check responseCode is 400\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check that products is an empty array\r",
									"pm.test(\"Products array is empty for invalid search term\", function () {\r",
									"    pm.expect(response.products).to.be.an(\"array\").that.is.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "Polo0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "invalid Request \"Delete\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ brandsList API\r",
									"console.log(\"تسخين خادم brandsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/searchProduct\",\r",
									"        method: \"POST\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct error message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if response contains the error message property\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    \r",
									"    // Validate the error message text\r",
									"    pm.expect(jsonData.message).to.equal(\"This request method is not supported.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				},
				{
					"name": "invalid Request \"Patch\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ brandsList API\r",
									"console.log(\"تسخين خادم brandsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/searchProduct\",\r",
									"        method: \"POST\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check that the response contains the correct error message\r",
									"pm.test('Check \"detail\" message is \"Method \\\\\"PATCH\\\\\" not allowed.\"', function () {\r",
									"    pm.expect(response.detail).to.eql('Method \"PATCH\" not allowed.');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/searchProduct",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"searchProduct"
							]
						},
						"description": "البحث عن منتج"
					},
					"response": []
				}
			]
		},
		{
			"name": "All Products List",
			"item": [
				{
					"name": "All Product List Satus code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate 'products' array\r",
									"pm.test(\"Valid 'products' array in response body\", function () {\r",
									"    pm.expect(jsonData).to.have.property('products');\r",
									"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    // Verify each product has required properties and validate nested objects\r",
									"    jsonData.products.forEach(function (product) {\r",
									"        pm.expect(product).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(product).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(product).to.have.property('price').that.is.a('string');\r",
									"        pm.expect(product).to.have.property('brand').that.is.a('string');\r",
									"        pm.expect(product).to.have.property('category').that.is.an('object');\r",
									"\r",
									"        // Validate 'category' object\r",
									"        pm.expect(product.category).to.have.property('usertype').that.is.an('object');\r",
									"        pm.expect(product.category.usertype).to.have.property('usertype').that.is.a('string');\r",
									"        pm.expect(product.category).to.have.property('category').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Check for duplicate product names\r",
									"pm.test(\"Check for duplicate product names\", function () {\r",
									"    const productNames = jsonData.products.map(product => product.name);\r",
									"    const duplicates = productNames.filter((name, index, arr) => arr.indexOf(name) !== index);\r",
									"    console.log(\"Duplicate product names:\", duplicates);\r",
									"    pm.expect(duplicates).to.be.an('array'); // Change this assertion based on your requirements\r",
									"});\r",
									"\r",
									"// Verify specific product exists (e.g., 'Blue Top')\r",
									"pm.test(\"Verify specific product exists (e.g., 'Blue Top')\", function () {\r",
									"    const productNames = jsonData.products.map(product => product.name);\r",
									"    pm.expect(productNames).to.include(\"Blue Top\");\r",
									"});\r",
									"\r",
									"// Extract and log unique brands\r",
									"pm.test(\"Extract unique brands from products\", function () {\r",
									"    const uniqueBrands = [...new Set(jsonData.products.map(product => product.brand))];\r",
									"    console.log(\"Unique brands:\", uniqueBrands);\r",
									"});\r",
									"\r",
									"// Validate total number of products\r",
									"pm.test(\"Total number of products matches expected count\", function () {\r",
									"    const expectedProductCount = 34; // Update based on actual count in the response\r",
									"    pm.expect(jsonData.products.length).to.eql(expectedProductCount);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Product List Body is json with All products list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate 'products' array\r",
									"pm.test(\"Valid 'products' array in response body\", function () {\r",
									"    pm.expect(jsonData).to.have.property('products');\r",
									"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    // Verify each product has required properties and validate nested objects\r",
									"    jsonData.products.forEach(function (product) {\r",
									"        pm.expect(product).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(product).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(product).to.have.property('price').that.is.a('string');\r",
									"        pm.expect(product).to.have.property('brand').that.is.a('string');\r",
									"        pm.expect(product).to.have.property('category').that.is.an('object');\r",
									"\r",
									"        // Validate 'category' object\r",
									"        pm.expect(product.category).to.have.property('usertype').that.is.an('object');\r",
									"        pm.expect(product.category.usertype).to.have.property('usertype').that.is.a('string');\r",
									"        pm.expect(product.category).to.have.property('category').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Check for duplicate product names\r",
									"pm.test(\"Check for duplicate product names\", function () {\r",
									"    const productNames = jsonData.products.map(product => product.name);\r",
									"    const duplicates = productNames.filter((name, index, arr) => arr.indexOf(name) !== index);\r",
									"    console.log(\"Duplicate product names:\", duplicates);\r",
									"    pm.expect(duplicates).to.be.an('array'); // Change this assertion based on your requirements\r",
									"});\r",
									"\r",
									"// Verify specific product exists (e.g., 'Blue Top')\r",
									"pm.test(\"Verify specific product exists (e.g., 'Blue Top')\", function () {\r",
									"    const productNames = jsonData.products.map(product => product.name);\r",
									"    pm.expect(productNames).to.include(\"Blue Top\");\r",
									"});\r",
									"\r",
									"// Extract and log unique brands\r",
									"pm.test(\"Extract unique brands from products\", function () {\r",
									"    const uniqueBrands = [...new Set(jsonData.products.map(product => product.brand))];\r",
									"    console.log(\"Unique brands:\", uniqueBrands);\r",
									"});\r",
									"\r",
									"// Validate total number of products\r",
									"pm.test(\"Total number of products matches expected count\", function () {\r",
									"    const expectedProductCount = 34; // Update based on actual count in the response\r",
									"    pm.expect(jsonData.products.length).to.eql(expectedProductCount);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Product List Response time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ productsList API\r",
									"console.log(\"تسخين خادم productsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/productsList\",\r",
									"        method: \"GET\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate HTTPS/TLS Encryption and Valid Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Post\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid Response body contains 405 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if response contains correct response code\r",
									"    pm.expect(jsonData).to.have.property('responseCode');\r",
									"    pm.expect(jsonData.responseCode).to.equal(405);\r",
									"    \r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Blue Top",
									"type": "text"
								},
								{
									"key": "price",
									"value": "Rs. 500",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "Polo",
									"type": "text"
								},
								{
									"key": "usertype",
									"value": "Women",
									"type": "text"
								},
								{
									"key": "category ",
									"value": "Tops",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Put\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Valid Response body contains 405 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    \r",
									"\r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Blue Top",
									"type": "text"
								},
								{
									"key": "price",
									"value": "Rs. 500",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "Polo",
									"type": "text"
								},
								{
									"key": "usertype",
									"value": "Women",
									"type": "text"
								},
								{
									"key": "category ",
									"value": "Tops",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Delete\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Valid Response body contains 405 error with correct message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"  \r",
									"    \r",
									"    // Check if response contains correct error message\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Blue Top",
									"type": "text"
								},
								{
									"key": "price",
									"value": "Rs. 500",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "Polo",
									"type": "text"
								},
								{
									"key": "usertype",
									"value": "Women",
									"type": "text"
								},
								{
									"key": "category ",
									"value": "Tops",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Parameters \"poductlist22\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/productsList/poductlist22?id=23&name=Blue Top&price=Rs. 500&brand=Polo&category=[object Object]",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList",
								"poductlist22"
							],
							"query": [
								{
									"key": "id",
									"value": "23"
								},
								{
									"key": "name",
									"value": "Blue Top"
								},
								{
									"key": "price",
									"value": "Rs. 500"
								},
								{
									"key": "brand",
									"value": "Polo"
								},
								{
									"key": "category",
									"value": "[object Object]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Headers contain the expected Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response headers contain expected Content-Type\", function () {\r",
									"    // Check if Content-Type header exists\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"    \r",
									"    // Validate the Content-Type value\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 23,  \"name\": \"Blue Top\", \"price\": \"Rs. 500\", \"brand\": \"Polo\", \"category\":\r\n{\"usertype\": {\"usertype\": \"Women\"}, \"category\": \"Tops\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Each product contains all required fields with correct structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Each product contains all required fields with correct structure\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json().products;\r",
									"\r",
									"    // Check if response is an array of products\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"\r",
									"    // Define required fields for products\r",
									"    const requiredFields = [\r",
									"        'id',\r",
									"        'name',\r",
									"        'price',\r",
									"        'brand',\r",
									"        'category'\r",
									"    ];\r",
									"\r",
									"    // Define required nested fields\r",
									"    const requiredCategoryFields = ['usertype', 'category'];\r",
									"    const requiredUsertypeFields = ['usertype'];\r",
									"\r",
									"    // Check each product for all required fields and correct structure\r",
									"    jsonData.forEach(function(product, index) {\r",
									"        // Check top-level required fields\r",
									"        requiredFields.forEach(function(field) {\r",
									"            pm.expect(product, `Product at index ${index} missing field: ${field}`).to.have.property(field);\r",
									"        });\r",
									"\r",
									"        // Check category object structure\r",
									"        pm.expect(product.category, `Product at index ${index} has invalid category structure`).to.be.an('object');\r",
									"        requiredCategoryFields.forEach(function(categoryField) {\r",
									"            pm.expect(product.category, `Product at index ${index} category missing field: ${categoryField}`).to.have.property(categoryField);\r",
									"        });\r",
									"\r",
									"        // Check usertype object structure within category\r",
									"        if (product.category.usertype) {\r",
									"            pm.expect(product.category.usertype, `Product at index ${index} category usertype missing field: usertype`).to.have.property('usertype');\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"HEAD\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "unexpected query parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList/product_details?product_details/=1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList",
								"product_details"
							],
							"query": [
								{
									"key": "product_details/",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cache Headers Prevent Client-Side Caching Copy 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the value of the Cache-Control header\r",
									"const cacheControl = pm.response.headers.get(\"Cache-Control\");\r",
									"\r",
									"// Check if it exists and equals \"no-store\"\r",
									"pm.test(\"Validate Cache-Control header is 'no-store'\", function () {\r",
									"    pm.expect(cacheControl).to.eql(\"no-store\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 23,  \"name\": \"Blue Top\", \"price\": \"Rs. 500\", \"brand\": \"Polo\", \"category\":\r\n{\"usertype\": {\"usertype\": \"Women\"}, \"category\": \"Tops\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/productsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All Brands List",
			"item": [
				{
					"name": "All Brands List Satus code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Brands List have Response Body is JSON Array with Valid Brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate 'brands' array\r",
									"pm.test(\"Valid 'brands' array in response body\", function () {\r",
									"    pm.expect(jsonData).to.have.property('brands');\r",
									"    pm.expect(jsonData.brands).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    // Verify each brand has required properties\r",
									"    jsonData.brands.forEach(function (brand) {\r",
									"        pm.expect(brand).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(brand).to.have.property('brand').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Check for duplicate brand names\r",
									"pm.test(\"Check for duplicate brand names\", function () {\r",
									"    const brandNames = jsonData.brands.map(brand => brand.brand);\r",
									"    const duplicates = brandNames.filter((name, index, arr) => arr.indexOf(name) !== index);\r",
									"    console.log(\"Duplicate brand names:\", duplicates);\r",
									"    pm.expect(duplicates).to.be.an('array'); // Adjust expectation as needed\r",
									"});\r",
									"\r",
									"// Extract and log unique brand names\r",
									"pm.test(\"Extract unique brand names\", function () {\r",
									"    const uniqueBrands = [...new Set(jsonData.brands.map(brand => brand.brand))];\r",
									"    console.log(\"Unique brands:\", uniqueBrands);\r",
									"});\r",
									"\r",
									"// Verify specific brand exists (e.g., 'Polo')\r",
									"pm.test(\"Verify specific brand exists (e.g., 'Polo')\", function () {\r",
									"    const brandNames = jsonData.brands.map(brand => brand.brand);\r",
									"    pm.expect(brandNames).to.include(\"Polo\");\r",
									"});\r",
									"\r",
									"// Validate total number of brands\r",
									"pm.test(\"Total number of brands matches expected count\", function () {\r",
									"    const expectedBrandCount = 34; // Update based on actual count in the response\r",
									"    pm.expect(jsonData.brands.length).to.eql(expectedBrandCount);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Brands List  Response time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ brandsList API\r",
									"console.log(\"تسخين خادم brandsList API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/brandsList\",\r",
									"        method: \"GET\"\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate HTTPS/TLS Encryption and Valid Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Headers contain the expected Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response headers contain expected Content-Type\", function () {\r",
									"    // Check if Content-Type header exists\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"    \r",
									"   \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    \r",
									"    // For strict checking of exact Content-Type value, use this instead:\r",
									"    // pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Each Brand contains all required fields with correct structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Each brand contains all required fields with correct structure\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var response = pm.response.json();\r",
									"    \r",
									"    // Check the response code\r",
									"    pm.expect(response.responseCode).to.eql(200);\r",
									"    \r",
									"    // Extract brands array\r",
									"    var brands = response.brands;\r",
									"\r",
									"    // Check if brands is an array\r",
									"    pm.expect(brands).to.be.an('array');\r",
									"\r",
									"    // Define required fields for brands\r",
									"    const requiredFields = ['id', 'brand'];\r",
									"\r",
									"    // Check each brand for all required fields\r",
									"    brands.forEach(function(brand, index) {\r",
									"        requiredFields.forEach(function(field) {\r",
									"            pm.expect(brand, `Brand at index ${index} missing field: ${field}`).to.have.property(field);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Post\" ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "Polo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList22",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList22"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid parameter'\", function () {\r",
									"    var res = pm.response.json();\r",
									"    pm.expect(res.error).to.eql(\"Invalid parameter\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/brandsList?brand_products=Polo00",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"brandsList"
							],
							"query": [
								{
									"key": "brand_products",
									"value": "Polo00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Security Headers in Response Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Headers include X-Content-Type-Options: nosniff\", function() {\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\");\r",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Strict-Transport-Security with correct max-age\", function() {\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate No Sensitive Data Exposure in Headers Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Headers include Authorization\", function () {\r",
									"    pm.response.to.have.header(\"Authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Set-Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-Api-Key\", function () {\r",
									"    pm.response.to.have.header(\"X-Api-Key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-User-Password\", function () {\r",
									"    pm.response.to.have.header(\"X-User-Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "CORS Headers for Cross-Origin Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate CORS Headers\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    // Check Access-Control-Allow-Origin\r",
									"    const allowOrigin = headers.get('Access-Control-Allow-Origin');\r",
									"    pm.expect(allowOrigin, \"Access-Control-Allow-Origin should not be * if credentials are allowed\")\r",
									"      .to.not.eql('*');\r",
									"\r",
									"    // Check Access-Control-Allow-Methods\r",
									"    const allowMethods = headers.get('Access-Control-Allow-Methods');\r",
									"    pm.expect(allowMethods, \"Allow Methods should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Headers\r",
									"    const allowHeaders = headers.get('Access-Control-Allow-Headers');\r",
									"    pm.expect(allowHeaders, \"Allow Headers should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Credentials\r",
									"    const allowCredentials = headers.get('Access-Control-Allow-Credentials');\r",
									"    if (allowCredentials === 'true') {\r",
									"        pm.expect(allowOrigin, \"If credentials are allowed, origin should not be *\")\r",
									"          .to.not.eql('*');\r",
									"    }\r",
									"\r",
									"    // Optional: Print them for debugging\r",
									"    console.log('CORS Headers:');\r",
									"    console.log('Access-Control-Allow-Origin:', allowOrigin);\r",
									"    console.log('Access-Control-Allow-Methods:', allowMethods);\r",
									"    console.log('Access-Control-Allow-Headers:', allowHeaders);\r",
									"    console.log('Access-Control-Allow-Credentials:', allowCredentials);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://test-domain.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cache Headers Prevent Client-Side Caching Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Cache-Control headers prevent client-side caching\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    const cacheControl = headers.get('Cache-Control');\r",
									"    const pragma = headers.get('Pragma');\r",
									"    const expires = headers.get('Expires');\r",
									"\r",
									"    // Check Cache-Control\r",
									"    pm.expect(cacheControl, \"Cache-Control header should exist\").to.not.be.undefined;\r",
									"    pm.expect(cacheControl.toLowerCase(), \"Cache-Control should include no-store\").to.include(\"no-store\");\r",
									"\r",
									"    // Check Pragma\r",
									"    if (pragma) {\r",
									"        pm.expect(pragma.toLowerCase(), \"Pragma should be no-cache\").to.include(\"no-cache\");\r",
									"    }\r",
									"\r",
									"    // Check Expires\r",
									"    if (expires) {\r",
									"        pm.expect(['0', '-1']).to.include(expires.trim(), \"Expires should be 0 or -1\");\r",
									"    }\r",
									"\r",
									"    // Optional log\r",
									"    console.log(\"Cache-Control:\", cacheControl);\r",
									"    console.log(\"Pragma:\", pragma);\r",
									"    console.log(\"Expires:\", expires);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "unexpected query parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList?brand_products=Polo0",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							],
							"query": [
								{
									"key": "brand_products",
									"value": "Polo0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Delete\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct error message\", function () {\r",
									"    // Parse response body as JSON\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check if response contains the error message property\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    \r",
									"    // Validate the error message text\r",
									"    pm.expect(jsonData.message).to.equal(\"This request method is not supported.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 1 }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"put\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "5",
									"type": "text"
								},
								{
									"key": "price",
									"value": "100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Patch\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 23,  \"name\": \"Blue Top\", \"price\": \"Rs. 500\", \"brand\": \"Polo\", \"category\":\r\n{\"usertype\": {\"usertype\": \"Women\"}, \"category\": \"Tops\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api//brandsList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"",
								"brandsList"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user account detail by email",
			"item": [
				{
					"name": "User Detail By Email  Satus code is 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Detail By Email  Body is Structure for Successful Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate entire response structure and data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Validate response code\r",
									"    pm.expect(jsonData).to.have.property(\"responseCode\");\r",
									"    pm.expect(jsonData.responseCode).to.eql(200);\r",
									"    \r",
									"    // Validate the user object exists\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"    var user = jsonData.user;\r",
									"    \r",
									"    // Validate all properties of the user object\r",
									"    pm.expect(user).to.have.property(\"id\", 172882);\r",
									"    pm.expect(user).to.have.property(\"name\", \"JohnDoe\");\r",
									"    pm.expect(user).to.have.property(\"email\", \"john.doe@example.com\");\r",
									"    pm.expect(user).to.have.property(\"title\", \"Mr\");\r",
									"    pm.expect(user).to.have.property(\"birth_day\", \"29\");\r",
									"    pm.expect(user).to.have.property(\"birth_month\", \"5\");\r",
									"    pm.expect(user).to.have.property(\"birth_year\", \"2003\");\r",
									"    pm.expect(user).to.have.property(\"first_name\", \"Luis\");\r",
									"    pm.expect(user).to.have.property(\"last_name\", \"Haag-Lemke\");\r",
									"    pm.expect(user).to.have.property(\"company\", \"Feest - Bins\");\r",
									"    pm.expect(user).to.have.property(\"address1\", \"53909 Shanel Villages\");\r",
									"    pm.expect(user).to.have.property(\"address2\", \"\");\r",
									"    pm.expect(user).to.have.property(\"country\", \"Australia\");\r",
									"    pm.expect(user).to.have.property(\"state\", \"Tasmania\");\r",
									"    pm.expect(user).to.have.property(\"city\", \"North Elfrieda\");\r",
									"    pm.expect(user).to.have.property(\"zipcode\", \"85459-6753\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check for duplicate data in user object\", function () {\r",
									"    var user = pm.response.json().user;\r",
									"    \r",
									"    // Get all values from the user object\r",
									"    var values = Object.values(user);\r",
									"    \r",
									"    // Create a set from the values (sets allow only unique values)\r",
									"    var uniqueValues = new Set(values);\r",
									"    \r",
									"    // If there are duplicate values, the set's size will be smaller than the original values array length.\r",
									"    pm.expect(uniqueValues.size, \"Duplicate data found in user object\").to.eql(values.length);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Detail By Email   Response time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ getUserDetailByEmail API\r",
									"console.log(\"تسخين خادم getUserDetailByEmail API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 4;\r",
									"\r",
									"// تنفيذ طلبات التسخين باستخدام بريد إلكتروني موجود\r",
									"// ملاحظة: تأكد من استخدام بريد إلكتروني موجود بالفعل للحصول على نتائج أفضل\r",
									"const existingEmail = \"test@example.com\"; // استبدله ببريد إلكتروني موجود\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/getUserDetailByEmail\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"email\", value: existingEmail}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate HTTPS/TLS Encryption and Valid Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Headers contain the expected Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First test for the security headers (keeping your original requirements)\r",
									"pm.test(\"Headers exclude Server header with version information\", function() {\r",
									"    const serverHeader = pm.response.headers.get(\"Server\");\r",
									"    \r",
									"    if (serverHeader === null) {\r",
									"        // Pass test if Server header doesn't exist at all\r",
									"        pm.expect(true).to.be.true;\r",
									"    } else {\r",
									"        // If Server header exists, ensure it doesn't contain version information\r",
									"        pm.expect(serverHeader).to.not.match(/\\d+\\.\\d+/);\r",
									"        console.log(\"Note: Server header exists but doesn't expose version: \" + serverHeader);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test for Content-Type - update to expect text/html (what the API actually returns)\r",
									"pm.test(\"Response headers contain expected Content-Type\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Email Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Missing Email Parameter\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Bad request, email parameter is missing in PUT request.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-Existent Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john@egypt.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john@egypt.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Invalid Email formate\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Invalid Email formate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=johnegypt.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "johnegypt.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Method Not Allowed for \"POST\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Security Headers in Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Headers include X-Content-Type-Options: nosniff\", function() {\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\");\r",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Strict-Transport-Security with correct max-age\", function() {\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ getUserDetailByEmail API\r",
									"console.log(\"تسخين خادم getUserDetailByEmail API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين باستخدام بريد إلكتروني موجود\r",
									"// ملاحظة: تأكد من استخدام بريد إلكتروني موجود بالفعل للحصول على نتائج أفضل\r",
									"const existingEmail = \"test@example.com\"; // استبدله ببريد إلكتروني موجود\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/getUserDetailByEmail\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"email\", value: existingEmail}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate No Sensitive Data Exposure in Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Headers include Authorization\", function () {\r",
									"    pm.response.to.have.header(\"Authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Set-Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-Api-Key\", function () {\r",
									"    pm.response.to.have.header(\"X-Api-Key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-User-Password\", function () {\r",
									"    pm.response.to.have.header(\"X-User-Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ getUserDetailByEmail API\r",
									"console.log(\"تسخين خادم getUserDetailByEmail API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// تنفيذ طلبات التسخين باستخدام بريد إلكتروني موجود\r",
									"// ملاحظة: تأكد من استخدام بريد إلكتروني موجود بالفعل للحصول على نتائج أفضل\r",
									"const existingEmail = \"test@example.com\"; // استبدله ببريد إلكتروني موجود\r",
									"\r",
									"// تنفيذ طلبات التسخين بشكل متتالي\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/getUserDetailByEmail\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"email\", value: existingEmail}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"حدث خطأ أثناء تسخين الطلب رقم \" + (i + 1) + \": \" + err);\r",
									"        } else {\r",
									"            console.log(\"طلب التسخين رقم \" + (i + 1) + \" - وقت الاستجابة: \" + res.responseTime + \" مللي ثانية\");\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CORS Headers for Cross-Origin Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate CORS header: Access-Control-Allow-Origin\", function () {\r",
									"    const corsHeader = pm.response.headers.get(\"Access-Control-Allow-Origin\");\r",
									"    console.log(\"CORS Header:\", corsHeader); // للمساعدة في التحقق\r",
									"    pm.expect(corsHeader).to.eql(\"*\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://test-domain.com",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Missing Email Parameter\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Bad request, email parameter is missing in PUT request.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cache Headers Prevent Client-Side Caching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Cache-Control headers prevent client-side caching\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    const cacheControl = headers.get('Cache-Control');\r",
									"    const pragma = headers.get('Pragma');\r",
									"    const expires = headers.get('Expires');\r",
									"\r",
									"    // Check Cache-Control\r",
									"    pm.expect(cacheControl, \"Cache-Control header should exist\").to.not.be.undefined;\r",
									"    pm.expect(cacheControl.toLowerCase(), \"Cache-Control should include no-store\").to.include(\"no-store\");\r",
									"\r",
									"    // Check Pragma\r",
									"    if (pragma) {\r",
									"        pm.expect(pragma.toLowerCase(), \"Pragma should be no-cache\").to.include(\"no-cache\");\r",
									"    }\r",
									"\r",
									"    // Check Expires\r",
									"    if (expires) {\r",
									"        pm.expect(['0', '-1']).to.include(expires.trim(), \"Expires should be 0 or -1\");\r",
									"    }\r",
									"\r",
									"    // Optional log\r",
									"    console.log(\"Cache-Control:\", cacheControl);\r",
									"    console.log(\"Pragma:\", pragma);\r",
									"    console.log(\"Expires:\", expires);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail22?email=user@test.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail22"
							],
							"query": [
								{
									"key": "email",
									"value": "user@test.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate JSON format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate JSON format for the response body\r",
									"pm.test(\"Validate JSON format for the response body\", function () {\r",
									"    pm.response.to.be.json; \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=user@test.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "user@test.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"DELETE\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Patch\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/api/getUserDetailByEmail?email=john.doe@example.com",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "john.doe@example.com"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User Account",
			"item": [
				{
					"name": "UpdateUserAccount  Satus code is 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe88@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserAccount  Response Body Structure for Successful Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate JSON structure for successful update response\r",
									"pm.test('Validate JSON structure for successful update', function () {\r",
									"    pm.expect(jsonData).to.have.property('responseCode');\r",
									"    pm.expect(jsonData.responseCode).to.equal(200);\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.equal('User updated!');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe818@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserAccount   Response time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ updateAccount API\r",
									"console.log(\"تسخين خادم updateAccount API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// سنحتاج أولاً إلى إنشاء حساب ثم تحديثه\r",
									"const createAndUpdateAccount = () => {\r",
									"    // إنشاء بريد إلكتروني عشوائي\r",
									"    const email = \"warmupupdate\" + Date.now() + Math.floor(Math.random() * 1000) + \"@example.com\";\r",
									"    \r",
									"    // إنشاء حساب جديد\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/createAccount\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"name\", value: \"Update Test User\"},\r",
									"                {key: \"email\", value: email},\r",
									"                {key: \"password\", value: \"test123\"},\r",
									"                {key: \"title\", value: \"Mr\"},\r",
									"                {key: \"birth_date\", value: \"10\"},\r",
									"                {key: \"birth_month\", value: \"5\"},\r",
									"                {key: \"birth_year\", value: \"1990\"}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (!err) {\r",
									"            // الآن نقوم بتحديث الحساب الذي تم إنشاؤه\r",
									"            pm.sendRequest({\r",
									"                url: \"https://automationexercise.com/api/updateAccount\",\r",
									"                method: \"PUT\",\r",
									"                header: {\r",
									"                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"                },\r",
									"                body: {\r",
									"                    mode: \"urlencoded\",\r",
									"                    urlencoded: [\r",
									"                        {key: \"name\", value: \"Updated Test User\"},\r",
									"                        {key: \"email\", value: email},\r",
									"                        {key: \"password\", value: \"test123\"},\r",
									"                        {key: \"title\", value: \"Mr\"},\r",
									"                        {key: \"birth_date\", value: \"11\"},\r",
									"                        {key: \"birth_month\", value: \"6\"},\r",
									"                        {key: \"birth_year\", value: \"1991\"}\r",
									"                    ]\r",
									"                }\r",
									"            }, function (updateErr, updateRes) {\r",
									"                if (updateErr) {\r",
									"                    console.log(\"حدث خطأ أثناء تسخين تحديث الحساب: \" + updateErr);\r",
									"                } else {\r",
									"                    console.log(\"تسخين تحديث الحساب - وقت الاستجابة: \" + updateRes.responseTime + \" مللي ثانية\");\r",
									"                }\r",
									"            });\r",
									"        } else {\r",
									"            console.log(\"حدث خطأ أثناء إنشاء حساب للتسخين: \" + err);\r",
									"        }\r",
									"    });\r",
									"};\r",
									"\r",
									"// تنفيذ عمليات إنشاء وتحديث الحسابات\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    createAndUpdateAccount();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jondoe89@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserAccount  Validate HTTPS/TLS Encryption and Valid Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe90@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Headers contain the expected Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response headers contain expected Content-Type\", function () {\r",
									"    // Check if Content-Type header exists\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"    \r",
									"    // Validate the Content-Type value (adjust as needed for your API)\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    \r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe91@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Method Not Allowed for \"POST\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Ahmed ",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "ahemd@gmail.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Email and Password Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe@example55com",
									"description": "Mandatory",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoeexample55com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Security Headers in Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Headers include X-Content-Type-Options: nosniff\", function() {\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\");\r",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Strict-Transport-Security with correct max-age\", function() {\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe92@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate No Sensitive Data Exposure in Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Headers include Authorization\", function () {\r",
									"    pm.response.to.have.header(\"Authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Set-Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-Api-Key\", function () {\r",
									"    pm.response.to.have.header(\"X-Api-Key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-User-Password\", function () {\r",
									"    pm.response.to.have.header(\"X-User-Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe93@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "CORS Headers for Cross-Origin Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate CORS Headers\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    // Check Access-Control-Allow-Origin\r",
									"    const allowOrigin = headers.get('Access-Control-Allow-Origin');\r",
									"    pm.expect(allowOrigin, \"Access-Control-Allow-Origin should not be * if credentials are allowed\")\r",
									"      .to.not.eql('*');\r",
									"\r",
									"    // Check Access-Control-Allow-Methods\r",
									"    const allowMethods = headers.get('Access-Control-Allow-Methods');\r",
									"    pm.expect(allowMethods, \"Allow Methods should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Headers\r",
									"    const allowHeaders = headers.get('Access-Control-Allow-Headers');\r",
									"    pm.expect(allowHeaders, \"Allow Headers should be defined\").to.not.be.undefined;\r",
									"\r",
									"    // Check Access-Control-Allow-Credentials\r",
									"    const allowCredentials = headers.get('Access-Control-Allow-Credentials');\r",
									"    if (allowCredentials === 'true') {\r",
									"        pm.expect(allowOrigin, \"If credentials are allowed, origin should not be *\")\r",
									"          .to.not.eql('*');\r",
									"    }\r",
									"\r",
									"    // Optional: Print them for debugging\r",
									"    console.log('CORS Headers:');\r",
									"    console.log('Access-Control-Allow-Origin:', allowOrigin);\r",
									"    console.log('Access-Control-Allow-Methods:', allowMethods);\r",
									"    console.log('Access-Control-Allow-Headers:', allowHeaders);\r",
									"    console.log('Access-Control-Allow-Credentials:', allowCredentials);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "http://test-domain.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe95@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cache Headers Prevent Client-Side Caching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Cache-Control headers prevent client-side caching\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    const cacheControl = headers.get('Cache-Control');\r",
									"    const pragma = headers.get('Pragma');\r",
									"    const expires = headers.get('Expires');\r",
									"\r",
									"    // Check Cache-Control\r",
									"    pm.expect(cacheControl, \"Cache-Control header should exist\").to.not.be.undefined;\r",
									"    pm.expect(cacheControl.toLowerCase(), \"Cache-Control should include no-store\").to.include(\"no-store\");\r",
									"\r",
									"    // Check Pragma\r",
									"    if (pragma) {\r",
									"        pm.expect(pragma.toLowerCase(), \"Pragma should be no-cache\").to.include(\"no-cache\");\r",
									"    }\r",
									"\r",
									"    // Check Expires\r",
									"    if (expires) {\r",
									"        pm.expect(['0', '-1']).to.include(expires.trim(), \"Expires should be 0 or -1\");\r",
									"    }\r",
									"\r",
									"    // Optional log\r",
									"    console.log(\"Cache-Control:\", cacheControl);\r",
									"    console.log(\"Pragma:\", pragma);\r",
									"    console.log(\"Expires:\", expires);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "http://test-domain.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe96@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Password Length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Password must be at least 8 characters'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Bad request, password parameter is missing in PUT request.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe98@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "4545454",
									"description": "Mandatory",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Optional Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Response includes optional field data'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User updated!\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johnd41oe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text",
									"disabled": true
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text",
									"disabled": true
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe100@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount22",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount22"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"DELETE\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe100@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Patch\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "email",
									"value": "johndoe101@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "05",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1990",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Tech Corp",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "123 Main Street",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "Apt 4B",
									"description": "Optional",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "state",
									"value": "California",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "city",
									"value": "San Francisco",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "94105",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1234567890",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/updateAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User Account",
			"item": [
				{
					"name": "DeleteUserAccount  Satus code is 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe2@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserAccount  Response Body Structure for Successful Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Message is 'User created!'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Account deleted!\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe3@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserAccount  Response time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// يوضع هذا في قسم Pre-request Script لـ deleteAccount API\r",
									"console.log(\"تسخين خادم deleteAccount API...\");\r",
									"\r",
									"// عدد مرات تكرار طلب التسخين\r",
									"const warmupCount = 3;\r",
									"\r",
									"// سنحتاج أولاً إلى إنشاء بعض الحسابات للحذف\r",
									"const createAndDeleteAccount = () => {\r",
									"    // إنشاء بريد إلكتروني عشوائي\r",
									"    const email = \"warmupdelete\" + Date.now() + Math.floor(Math.random() * 1000) + \"@example.com\";\r",
									"    \r",
									"    // إنشاء حساب جديد\r",
									"    pm.sendRequest({\r",
									"        url: \"https://automationexercise.com/api/createAccount\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"urlencoded\",\r",
									"            urlencoded: [\r",
									"                {key: \"name\", value: \"Delete Test User\"},\r",
									"                {key: \"email\", value: email},\r",
									"                {key: \"password\", value: \"test123\"},\r",
									"                {key: \"title\", value: \"Mr\"},\r",
									"                {key: \"birth_date\", value: \"10\"},\r",
									"                {key: \"birth_month\", value: \"5\"},\r",
									"                {key: \"birth_year\", value: \"1990\"}\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (!err) {\r",
									"            // الآن نحذف الحساب الذي تم إنشاؤه للتسخين\r",
									"            pm.sendRequest({\r",
									"                url: \"https://automationexercise.com/api/deleteAccount\",\r",
									"                method: \"DELETE\",\r",
									"                header: {\r",
									"                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"                },\r",
									"                body: {\r",
									"                    mode: \"urlencoded\",\r",
									"                    urlencoded: [\r",
									"                        {key: \"email\", value: email},\r",
									"                        {key: \"password\", value: \"test123\"}\r",
									"                    ]\r",
									"                }\r",
									"            }, function (delErr, delRes) {\r",
									"                if (delErr) {\r",
									"                    console.log(\"حدث خطأ أثناء تسخين حذف الحساب: \" + delErr);\r",
									"                } else {\r",
									"                    console.log(\"تسخين حذف الحساب - وقت الاستجابة: \" + delRes.responseTime + \" مللي ثانية\");\r",
									"                }\r",
									"            });\r",
									"        } else {\r",
									"            console.log(\"حدث خطأ أثناء إنشاء حساب للتسخين: \" + err);\r",
									"        }\r",
									"    });\r",
									"};\r",
									"\r",
									"// تنفيذ عمليات إنشاء وحذف الحسابات\r",
									"for (let i = 0; i < warmupCount; i++) {\r",
									"    createAndDeleteAccount();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe4@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate HTTPS/TLS Encryption and Valid Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Confirm the protocol used is HTTPS (based on request URL)\r",
									"pm.test(\"Protocol is HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"https\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe5@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Headers contain the expected Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response headers contain expected Content-Type\", function () {\r",
									"    // Check if Content-Type header exists\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"    \r",
									"\r",
									"    // Validate the Content-Type value (adjust as needed for your API)\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe6@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Method Not Allowed for \"POST\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Message is 'not allowed'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"detail\", \"Method \\\"POST\\\" not allowed.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jondoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Invalid Eamil Format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Account not found!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "1545448@fgd",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-Existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code is 400\r",
									"pm.test(\"Response code is 404\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"responseCode\", 404);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Email already exists!'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Account not found!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe@ex.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Security Headers in Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Headers include X-Content-Type-Options: nosniff\", function() {\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\");\r",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Strict-Transport-Security with correct max-age\", function() {\r",
									"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe7@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate No Sensitive Data Exposure in Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Headers include Authorization\", function () {\r",
									"    pm.response.to.have.header(\"Authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Set-Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include Cookie\", function () {\r",
									"    pm.response.to.have.header(\"Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-Api-Key\", function () {\r",
									"    pm.response.to.have.header(\"X-Api-Key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers include X-User-Password\", function () {\r",
									"    pm.response.to.have.header(\"X-User-Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe8@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "CORS Headers for Cross-Origin Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Cache-Control headers prevent client-side caching\", function () {\r",
									"    const headers = pm.response.headers;\r",
									"\r",
									"    const cacheControl = headers.get('Cache-Control');\r",
									"    const pragma = headers.get('Pragma');\r",
									"    const expires = headers.get('Expires');\r",
									"\r",
									"    // Check Cache-Control\r",
									"    pm.expect(cacheControl, \"Cache-Control header should exist\").to.not.be.undefined;\r",
									"    pm.expect(cacheControl.toLowerCase(), \"Cache-Control should include no-store\").to.include(\"no-store\");\r",
									"\r",
									"    // Check Pragma\r",
									"    if (pragma) {\r",
									"        pm.expect(pragma.toLowerCase(), \"Pragma should be no-cache\").to.include(\"no-cache\");\r",
									"    }\r",
									"\r",
									"    // Check Expires\r",
									"    if (expires) {\r",
									"        pm.expect(['0', '-1']).to.include(expires.trim(), \"Expires should be 0 or -1\");\r",
									"    }\r",
									"\r",
									"    // Optional log\r",
									"    console.log(\"Cache-Control:\", cacheControl);\r",
									"    console.log(\"Pragma:\", pragma);\r",
									"    console.log(\"Expires:\", expires);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Origin",
								"value": "http://test-domain.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe9@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Password Length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Password must be at least 8 characters'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Bad request, password parameter is missing in DELETE request.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe@587e7xample555.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "sd;fjlidjsflksjd'flijsd'lfj'sldjgf'sdjg'jsd'lgkjsdlkgjlsdjglskdjg'lsjkdg'ljkd'gljksd",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Already deleted Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'Email already exists!'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Account not found!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad Request for Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Bad request, email parameter is missing in DELETE request.\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Bad request, email parameter is missing in DELETE request.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount22",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount22"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"put\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"// Pa// Parse response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate that the message is \"Email already exists!\"\r",
									"pm.test(\"Message is 'User created!'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"detail\", \"Method \\\"PUT\\\" not allowed.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid Request \"Patch\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body should contain correct error detail\", function () {\r",
									"    // Parse the JSON response body\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check that the response has a property \"detail\"\r",
									"    pm.expect(jsonData).to.have.property(\"detail\");\r",
									"\r",
									"    // Build the expected error message based on the method you used in the request\r",
									"    var expectedMessage = 'Method \"' + pm.request.method + '\" not allowed.';\r",
									"    \r",
									"    // Check that the error detail matches the expected error message\r",
									"    pm.expect(jsonData.detail).to.eql(expectedMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe@example.com",
									"description": "Mandatory",
									"type": "text"
								},
								{
									"key": "password",
									"value": "securepassword123",
									"description": "Mandatory",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deleteAccount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}